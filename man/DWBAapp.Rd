% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/app.R
\name{DWBAapp}
\alias{DWBAapp}
\title{DWBA shiny app}
\usage{
DWBAapp()
}
\value{
Runs a DWBA web application
}
\description{
This is a Shiny web application for the DWBA model.
}
\section{General outputs}{



All Shape, Orientation, Material Property and Simulation settings that are used as model input can be changed manually or be defined through configuration and profile files.

Whenever the model is run, two plots will be generated and a data table will be generated.
}

\section{Output plots}{

Two plots will be displayed after each model run.
One plot is displaying the shape of the input object and a second one showing the model output versus a selected variable. Model outputs and display variable can be selected under the Simulation Tab.

\emph{Exporting plots}

Plots can be exported by right-clicking the plot and selecting save as. The size of the plots will automatically adopt to the size of the browser window.
The values of the plot can be eplored by hovering over the plot with the mouse. The value closest to the cursor location and the distance to the closest value point are being displayed below the plot.
\emph{Zooming in the model output plot}

Zooming can be achieved by drawing a box (holding left mouse key down) on the output plot. Once the box is visible, the plot will zoom into the selected area through double-clicking. Returning to the original zoom can be achieved through double clicking on the plot outside of the box area.
}

\section{Datatable output}{

The datatable can be exported as csv file by clicking the Export button above the shape plot. The number of shown datapoints per table page can be varied by chaning the Show entries option box.
}

\section{Model parameters}{

Four different types of model input parameters an be defined:
\enumerate{
      \item Shape
      \item Orientation
      \item Orientation
      \item Simulation
   }

These different input types are organised in tabs.
Predefined configuration files which can define all settings can be loaded by clicking the Browse button under the Load Config menu at the top of the right frame.

\strong{Shape settings:}

Arbitrary shapes can be loaded by clicking the Shape Profile checkbox and loading a .dat file containing at least three columns without headers. The first column contains x coordinates, the second column contains the y coordinates and the thrid column contains the tapering for each point describing the shape.
The length (in mmm) and tapering of the shape can be defined through numeric inputs. The tapering of the shape and the x axis can be smoothed. Increasing the axis smoothing flattens the shape. Increasing the taper smooth smoothens (simplifies) the shape. If the taper smooth is set to above 0, the dashed line on the shape plot will represent the original input coordinates, while the solid line represents the smoothed, model input shape.

If no shape profile is loaded, a uniformely bent cylinder can be generated with Length, radius of curvature girth (L/a) and tapering order information. If the radius of curvature is unknown, it can be computed for a given set of points by using

If the model should be run over a range of lengths, a length average can be computed. If a length average should be calculated, the standard deviation and the increment need to be fixed.

Changing the length
\strong{Orientation settings:}

On the orientation tab, the mean, minimum and maximum orientation angles (theta) can be defined. An average result over a range of orientation angles can be computed, following either a gaussian or uniform distribtuion. If an average should be calculated, the standard deviation and increment have to be fixed.

\strong{Material Property settings:}


\strong{Simulation settings:}

#' Here the settings for the simulation and output plot settings are defined:

\emph{Plot Output options are:}
TS, Scattering Amplitude, Cross-Section and reduced TS

\emph{Variable Options are:}
Frequency [kHz], angle [degrees] and ka (wave number)
}

\examples{
DWBAapp() #run the web applications
}
